/*
void create_game()
{
    if (game) delete game;
    game = nullptr;

    printf("Instantiating \"%s\" game...\n", GAME::Name);
    game = new GAME(snes);
    game->set_game_started_handler([]() {
        game->clear_cache(); // is this good enough?
        if (ap && ap->get_state() > APClient::State::ROOM_INFO) {
            // compare seed & slot and disconnect if they do not match
            if (!game->get_seed().empty() &&
                strncmp(game->get_seed().c_str(), ap->get_seed().c_str(), GAME::MAX_SEED_LENGTH) != 0)
            {
                bad_seed(ap->get_seed(), game->get_seed());
                ap->reset();
                return;
            }
            else if (game->get_slot() != ap->get_slot())
            {
                printf("Slot changed, disconnecting.\n");
                ap->reset();
                return;
            }
            else if (game->get_deathlink() != game->want_deathlink()) {
                std::list<std::string> tags;
                game->set_deathlink(game->want_deathlink());
                if (game->get_deathlink()) tags.push_back("DeathLink");
                ap->ConnectUpdate(false, 0, true, {"DeathLink"});
            }
        }
        if (ap && ap->get_state() == APClient::State::ROOM_INFO) {
            if (!game->get_seed().empty() &&
                strncmp(game->get_seed().c_str(), ap->get_seed().c_str(), GAME::MAX_SEED_LENGTH) != 0)
            {
                bad_seed(ap->get_seed(), game->get_seed());
                return;
            }
            else
            {
                std::list<std::string> tags;
                game->set_deathlink(game->want_deathlink());
                if (game->get_deathlink()) tags.push_back("DeathLink");
                ap->ConnectSlot(game->get_slot(), password, game->get_items_handling(), tags, VERSION_TUPLE);
                ap_connect_sent = true; // TODO: move to APClient::State ?
            }
        }
    });
    game->set_game_joined_handler([]() {
        // TODO: cache in Game instead of ap->sync()?
        if (ap && ap->get_state() == APClient::State::SLOT_CONNECTED) {
            ap->Sync();
        }
    });
    game->set_death_handler([]() {
        if (!ap) return;
        deathtime = ap->get_server_time();
        json data{
                {"time", deathtime}, // TODO: insert time here
                {"cause", "Evermore."},
                {"source", ap->get_slot()},
        };
        ap->Bounce(data, {}, {}, {"DeathLink"});
    });
}
*/
